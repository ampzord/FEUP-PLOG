isQueen(Piece) -> 
							(
							%top left corner
							checkQueenMovement(Board,ColumnOrigin,LineOrigin,'A',1,HPoss1,VPoss1,OPoss1), !, append(HPoss1,VPoss1,L1), append(OPoss1,L1,Poss1),
							%top middle corner
						  	checkQueenMovement(Board,ColumnOrigin,LineOrigin,ColumnOrigin,1,HPoss2,VPoss2,OPoss2), !, append(HPoss2,VPoss2,L2), append(OPoss2,L2,Poss2),
						  	%top right corner
						  	checkQueenMovement(Board,ColumnOrigin,LineOrigin,'H',1,HPoss3,VPoss3,OPoss3), !, append(HPoss3,VPoss3,L3), append(OPoss3,L3,Poss3),
						  	%middle left corner
						  	checkQueenMovement(Board,ColumnOrigin,LineOrigin,'A',LineOrigin,HPoss4,VPoss4,OPoss4), !, append(HPoss4,VPoss4,L4), append(OPoss4,L4,Poss4),
						  	%middle right corner
						  	checkQueenMovement(Board,ColumnOrigin,LineOrigin,'H',LineOrigin,HPoss5,VPoss5,OPoss5), !, append(HPoss5,VPoss5,L5), append(OPoss5,L5,Poss5),
						  	%bottom left corner
						  	checkQueenMovement(Board,ColumnOrigin,LineOrigin,'A',8,HPoss,VPoss,OPoss), !, append(HPoss6,VPoss6,L6), append(OPoss6,L6,Poss6),
						  	%bottom middle corner
						  	checkQueenMovement(Board,ColumnOrigin,LineOrigin,ColumnOrigin,8,HPoss,VPoss,OPoss), !, append(HPoss7,VPoss7,L7), append(OPoss7,L7,Poss7),
						  	%bottom right corner
						  	checkQueenMovement(Board,ColumnOrigin,LineOrigin,'H',8,HPoss,VPoss,OPoss), !, append(HPoss8,VPoss8,L8), append(OPoss8,L8,Poss8),

						  	append(Poss1,Poss2,Possf1),
						  	append(Possf1,Poss3,Possf2),
						  	append(Possf2,Poss4,Possf3),
						  	append(Possf3,Poss5,Possf4),
						  	append(Possf4,Poss6,Possf5),
						  	append(Possf5,Poss7,Possf6),
						  	append(Possf6,Poss8,Possf7),
						  	append(OldList,Possf7,NewList)
						  );~


isBlackTower(Piece) ->
						  (
						  	write('Inside isBlackTower :'), write(Piece), nl,
						  	%upper vertical movement
						  	checkTowerMovement(Board,ColumnOrigin,LineOrigin,ColumnOrigin,1,HPoss9,VPoss9), write('HEUHEUHEU first checkTowerMovement'), nl, append(HPoss9,VPoss9,Possf9),
						  	write('After first checkTowerMovement'), nl,
						  	%left horizontal movement
						  	checkTowerMovement(Board,ColumnOrigin,LineOrigin,'A',LineOrigin,HPoss10,VPoss10), append(HPoss10,VPoss10,Possf10),
						  	%right horizontal movement
						  	checkTowerMovement(Board,ColumnOrigin,LineOrigin,'H',LineOrigin,HPoss11,VPoss11), append(HPoss11,VPoss11,Possf11),
						  	%bottom vertical movement
						  	checkTowerMovement(Board,ColumnOrigin,LineOrigin,ColumnOrigin,8,HPoss12,VPoss12), append(HPoss12,VPoss12,Possf12),

						  	append(Possf9,Possf10,Possf13),
						  	append(Possf13,Possf11,Possf14),
						  	append(Possf14,Possf12,Possf13),
						  	write('Possf13: '), write(Possf13), nl,
						  	append(OldList,Possf13,NewList),

						  	write('NewList'), write(NewList), nl
						  );

		isBlackBishop(Piece) ->
		                  (
		                  	%top left corner
		                  	checkBishopMovement(Board,ColumnOrigin,LineOrigin,'A',1,Possf15),
		                  	%top right corner
		                  	checkBishopMovement(Board,ColumnOrigin,LineOrigin,'H',1,Possf16),
		                  	%bottom left corner
		                  	checkBishopMovement(Board,ColumnOrigin,LineOrigin,'A',8,Possf17),
		                  	%bottom right corner
		                  	checkBishopMovement(Board,ColumnOrigin,LineOrigin,'H',8,Possf18),

		                  	append(Possf15,Possf16,Passf20),
		                  	append(Possf17,Possf20,Passf21),
		                  	append(Possf18,Possf21,Passf22),
		                  	append(OldList,Passf22,NewList)
		                  )
